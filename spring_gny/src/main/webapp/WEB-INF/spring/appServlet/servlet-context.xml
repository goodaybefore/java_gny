<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	
	<!-- ViewResolver을 이용해서 넘어온 파일 이름을 분석함.
			prefix : home이라는 글자 앞에 /WEB-INF/views/ 가 붙음
			suffix : home이라는 글자 뒤에 .jsp 가 붙음 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<!-- 아래는 views를 jsp를 사용할건지 html을 사용할건지 결정해주는 부분 -->
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="kr.green.spring.*" />
	
	<!--View resolver -->
	<!--타일즈 resolver가 실행됐을 때의 설정파일 -->
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	    <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
	    <beans:property name="order" value="1" /><!-- 순서를 우선으로 지정 -->
	</beans:bean>
	     
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	    <beans:property name="definitions">
	        <beans:list>
	            <beans:value>/WEB-INF/spring/tiles-def.xml</beans:value>
	        </beans:list>
	    </beans:property>
	</beans:bean>
	
	
	<!-- loginInterceptor를 등록. * 등록시 class부분에 있는 경로 설정 주의하기 -->
	<beans:bean id="loginInterceptor" 
	class="kr.green.spring.interceptor.LoginInterceptor"></beans:bean>
	
	<!-- memberInterceptro 등록. id에는 Member가 아니라 member 임. class에는 Member..왜지-->
	<beans:bean id="memberInterceptor" 
	class="kr.green.spring.interceptor.MemberInterceptor"></beans:bean>
	
	<!-- GuestInterceptor-->
	<beans:bean id="guestInterceptor" 
	class="kr.green.spring.interceptor.GuestInterceptor"></beans:bean>
	
	<!-- 등록된 Interceptor가 어떤 url에 동작할 지 설정해주는 태그 -->
	<interceptors>
	    <interceptor>
	    <!-- /login  -->
	        <mapping path="/login"/>
	        <!-- login버튼이 다른데서도 동작한다! 하면 이렇게 추가해주면됨. -->
	        <mapping path="/login2"/>
	        <beans:ref bean="loginInterceptor"/>
	    </interceptor>
	    
	    <interceptor>
	    <!-- 요거 실행시 동작하게 할것  -->
	    <!-- member만 접근할 수 있는 페이지 -->
	        <mapping path="/board/register"/>
	        <mapping path="/board/modify"/>
	        <mapping path="/board/delete"/>
	        <mapping path="/mypage"/>
	        <beans:ref bean="memberInterceptor"/>
	    </interceptor>
	    
	    <interceptor>
	        <mapping path="/login"/>
	        <mapping path="/signup"/>
	        <beans:ref bean="guestInterceptor"/>
	    </interceptor>
	    
	</interceptors>
	
	
	<!-- 파일 업로드 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <!-- 업로드 최대 크기 10Mb -->
	    <beans:property name="maxUploadSize" value="10485760"></beans:property>
	</beans:bean>

</beans:beans>
